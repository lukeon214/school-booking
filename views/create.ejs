<h1>Create a New Form</h1>

<form method="POST" action="/create" onsubmit="return handleSubmit()">
  <input name="title" placeholder="Form Title" required><br><br>

  <label>Who can fill this form?</label><br>
  <select name="private">
    <option value="0">Anyone (Public)</option>
    <option value="1">Only logged-in users</option>
  </select><br><br>

  <h3>Fields</h3>
  <div id="fields-container" class="field-sortable"></div>

  <button type="button" class="form-btn" onclick="addField()">âž• Add Field</button>
  <br><br>

  <input type="hidden" name="fieldsJSON" id="fieldsJSON">
  <button type="submit" class="form-btn primary">âœ… Create Form</button>
</form>

<!-- ðŸ”¥ SortableJS for drag and drop -->
<script src="https://cdn.jsdelivr.net/npm/sortablejs@1.15.0/Sortable.min.js"></script>

<script>
  let fields = [];

  function addField() {
    fields.push({
      label: '',
      type: 'text',
      description: '',
      placeholder: '',
      choices: [],
      required: false,
      maxResponses: null
    });
    renderFields();
  }

  function duplicateField(i) {
    const copy = JSON.parse(JSON.stringify(fields[i]));
    fields.splice(i + 1, 0, copy);
    renderFields();
  }

  function removeField(i) {
    fields.splice(i, 1);
    renderFields();
  }

  function renderFields() {
    const container = document.getElementById('fields-container');
    container.innerHTML = '';

    fields.forEach((field, i) => {
      const wrapper = document.createElement('div');
      wrapper.className = 'card';
      wrapper.setAttribute('data-id', i);

      wrapper.innerHTML = `
        <div class="card-drag">â˜° Drag</div>

        <input type="text" placeholder="Enter your question..." value="${field.label}" 
          oninput="fields[${i}].label = this.value" style="font-size: 1.1rem; font-weight: 600; margin-bottom: 0.5rem; width: 100%;">

        ${['radio', 'checkbox'].includes(field.type) ? `
          <div id="choices-list-${i}">
            ${field.choices.map((opt, j) => `
              <div class="form-option">
                ${field.type === 'radio' ? '<input type="radio" disabled>' : '<input type="checkbox" disabled>'}
                <input type="text" value="${opt}" 
                  oninput="fields[${i}].choices[${j}] = this.value">
                <button onclick="removeChoice(${i}, ${j})">ðŸ—‘</button>
              </div>
            `).join('')}
          </div>
          <button type="button" onclick="addChoice(${i})">âž• Add Option</button>
          <button type="button" onclick="addOther(${i})">âž• Add 'Other'</button>
        ` : field.type === 'textarea' ? `
          <textarea disabled placeholder="Long answer preview..." style="width:100%; margin-top: 0.5rem;"></textarea>
        ` : field.type === 'date' ? `
          <input type="date" disabled style="width:100%; margin-top: 0.5rem;">
        ` : field.type === 'number' ? `
          <input type="number" disabled placeholder="Number input preview..." style="width:100%; margin-top: 0.5rem;">
        ` : `
          <input type="text" disabled placeholder="Short answer preview..." style="width:100%; margin-top: 0.5rem;">
        `}

        <div class="form-footer">
          <div class="toggle">
            <label>Required</label>
            <input type="checkbox" ${field.required ? 'checked' : ''} 
              onchange="fields[${i}].required = this.checked">
          </div>

          ${field.type === 'textarea' ? `
            <div class="toggle">
              <label>Long Answer</label>
              <input type="checkbox" checked disabled>
            </div>` : ''}

          ${field.type === 'checkbox' ? `
            <div class="toggle">
              <label>Multiple Answers</label>
              <input type="checkbox" checked disabled>
            </div>` : ''}
          
          <div>
            <button type="button" onclick="duplicateField(${i})">ðŸ“„</button>
            <button type="button" class="form-btn danger" onclick="removeField(${i})">ðŸ—‘</button>
          </div>
        </div>
      `;

      container.appendChild(wrapper);
    });

    Sortable.create(container, {
      animation: 150,
      handle: '.card-drag',
      onEnd: e => {
        const item = fields.splice(e.oldIndex, 1)[0];
        fields.splice(e.newIndex, 0, item);
        renderFields();
      }
    });
  }

  function updateType(i, val) {
    fields[i].type = val;
    if (!['radio', 'checkbox'].includes(val)) fields[i].choices = [];
    renderFields();
  }

  function updateChoices(i, string) {
    fields[i].choices = string.split(',').map(x => x.trim()).filter(Boolean);
  }

  function handleSubmit() {
    document.getElementById('fieldsJSON').value = JSON.stringify(fields);
    return true;
  }

  function addChoice(i) {
  fields[i].choices = fields[i].choices || [];
  fields[i].choices.push(`Option ${fields[i].choices.length + 1}`);
  renderFields();
  }

  function addOther(i) {
    fields[i].choices = fields[i].choices || [];
    if (!fields[i].choices.includes("Other")) {
      fields[i].choices.push("Other");
      renderFields();
    }
  }

  function removeChoice(i, j) {
    fields[i].choices.splice(j, 1);
    renderFields();
  }
</script>